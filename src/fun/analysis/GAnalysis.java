/* This file was generated by SableCC (http://www.sablecc.org/). */

package fun.analysis;

import fun.node.*;

public interface GAnalysis<T,S> extends Switch<T,S>
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    T caseStart(Start node, S helper);
    T caseAConstTerm(AConstTerm node, S helper);
    T caseAIdentTerm(AIdentTerm node, S helper);
    T caseAFnTerm(AFnTerm node, S helper);
    T caseAFunTerm(AFunTerm node, S helper);
    T caseAAppTerm(AAppTerm node, S helper);
    T caseAIfTerm(AIfTerm node, S helper);
    T caseALetTerm(ALetTerm node, S helper);
    T caseABinopTerm(ABinopTerm node, S helper);
    T caseACnumConst(ACnumConst node, S helper);
    T caseACtrueConst(ACtrueConst node, S helper);
    T caseACfalseConst(ACfalseConst node, S helper);
    T caseAPlusOp(APlusOp node, S helper);
    T caseATimesOp(ATimesOp node, S helper);
    T caseAMinusOp(AMinusOp node, S helper);
    T caseAAndOp(AAndOp node, S helper);
    T caseAOrOp(AOrOp node, S helper);
    T caseALsOp(ALsOp node, S helper);
    T caseAGtOp(AGtOp node, S helper);

    T caseTWhiteSpace(TWhiteSpace node, S helper);
    T caseTLparen(TLparen node, S helper);
    T caseTRparen(TRparen node, S helper);
    T caseTCtrue(TCtrue node, S helper);
    T caseTCfalse(TCfalse node, S helper);
    T caseTFn(TFn node, S helper);
    T caseTFun(TFun node, S helper);
    T caseTIf(TIf node, S helper);
    T caseTThen(TThen node, S helper);
    T caseTElse(TElse node, S helper);
    T caseTLet(TLet node, S helper);
    T caseTIn(TIn node, S helper);
    T caseTImplies(TImplies node, S helper);
    T caseTIs(TIs node, S helper);
    T caseTPlus(TPlus node, S helper);
    T caseTMinus(TMinus node, S helper);
    T caseTTimes(TTimes node, S helper);
    T caseTAnd(TAnd node, S helper);
    T caseTOr(TOr node, S helper);
    T caseTLs(TLs node, S helper);
    T caseTGt(TGt node, S helper);
    T caseTInteger(TInteger node, S helper);
    T caseTId(TId node, S helper);
    T caseEOF(EOF node, S helper);
}
