/* This file was generated by SableCC (http://www.sablecc.org/). */

package fun.analysis;

import java.util.*;
import fun.node.*;

public class GAnalysisAdapter<T,S> implements GAnalysis<T,S>
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public T caseStart(Start node, S helper)
    {
        return defaultCase(node,helper);
    }

     @Override
    public T caseAConstTerm(AConstTerm node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseAIdentTerm(AIdentTerm node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseAFnTerm(AFnTerm node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseAFunTerm(AFunTerm node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseAAppTerm(AAppTerm node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseAIfTerm(AIfTerm node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseALetTerm(ALetTerm node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseABinopTerm(ABinopTerm node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseACnumConst(ACnumConst node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseACtrueConst(ACtrueConst node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseACfalseConst(ACfalseConst node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseAPlusOp(APlusOp node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseATimesOp(ATimesOp node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseAMinusOp(AMinusOp node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseAAndOp(AAndOp node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseAOrOp(AOrOp node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseALsOp(ALsOp node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseAGtOp(AGtOp node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseTWhiteSpace(TWhiteSpace node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseTLparen(TLparen node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseTRparen(TRparen node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseTCtrue(TCtrue node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseTCfalse(TCfalse node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseTFn(TFn node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseTFun(TFun node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseTIf(TIf node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseTThen(TThen node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseTElse(TElse node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseTLet(TLet node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseTIn(TIn node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseTImplies(TImplies node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseTIs(TIs node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseTPlus(TPlus node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseTMinus(TMinus node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseTTimes(TTimes node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseTAnd(TAnd node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseTOr(TOr node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseTLs(TLs node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseTGt(TGt node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseTInteger(TInteger node, S helper)
    {
         return defaultCase(node, helper);
    }

     @Override
    public T caseTId(TId node, S helper)
    {
         return defaultCase(node, helper);
    }

    public T caseEOF(EOF node, S helper)
    {
       return defaultCase(node,helper);
    }

    public T defaultCase(@SuppressWarnings("unused") Node node, S helper)
    {
        // do nothing
        return null;
    }
}
