/* This file was generated by SableCC (http://www.sablecc.org/). */

package fun.analysis;

import java.util.*;
import fun.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPTerm().apply(this);
        outStart(node);
    }

    public void inAConstTerm(AConstTerm node)
    {
        defaultIn(node);
    }

    public void outAConstTerm(AConstTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstTerm(AConstTerm node)
    {
        inAConstTerm(node);
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        outAConstTerm(node);
    }

    public void inAIdentTerm(AIdentTerm node)
    {
        defaultIn(node);
    }

    public void outAIdentTerm(AIdentTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentTerm(AIdentTerm node)
    {
        inAIdentTerm(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdentTerm(node);
    }

    public void inAFnTerm(AFnTerm node)
    {
        defaultIn(node);
    }

    public void outAFnTerm(AFnTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFnTerm(AFnTerm node)
    {
        inAFnTerm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAFnTerm(node);
    }

    public void inAFunTerm(AFunTerm node)
    {
        defaultIn(node);
    }

    public void outAFunTerm(AFunTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunTerm(AFunTerm node)
    {
        inAFunTerm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getParam() != null)
        {
            node.getParam().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAFunTerm(node);
    }

    public void inAAppTerm(AAppTerm node)
    {
        defaultIn(node);
    }

    public void outAAppTerm(AAppTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAppTerm(AAppTerm node)
    {
        inAAppTerm(node);
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        if(node.getFun() != null)
        {
            node.getFun().apply(this);
        }
        outAAppTerm(node);
    }

    public void inAIfTerm(AIfTerm node)
    {
        defaultIn(node);
    }

    public void outAIfTerm(AIfTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfTerm(AIfTerm node)
    {
        inAIfTerm(node);
        if(node.getFalsebranch() != null)
        {
            node.getFalsebranch().apply(this);
        }
        if(node.getTruebranch() != null)
        {
            node.getTruebranch().apply(this);
        }
        if(node.getTest() != null)
        {
            node.getTest().apply(this);
        }
        outAIfTerm(node);
    }

    public void inALetTerm(ALetTerm node)
    {
        defaultIn(node);
    }

    public void outALetTerm(ALetTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALetTerm(ALetTerm node)
    {
        inALetTerm(node);
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        if(node.getVal() != null)
        {
            node.getVal().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outALetTerm(node);
    }

    public void inABinopTerm(ABinopTerm node)
    {
        defaultIn(node);
    }

    public void outABinopTerm(ABinopTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinopTerm(ABinopTerm node)
    {
        inABinopTerm(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getOp() != null)
        {
            node.getOp().apply(this);
        }
        outABinopTerm(node);
    }

    public void inACnumConst(ACnumConst node)
    {
        defaultIn(node);
    }

    public void outACnumConst(ACnumConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACnumConst(ACnumConst node)
    {
        inACnumConst(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outACnumConst(node);
    }

    public void inACtrueConst(ACtrueConst node)
    {
        defaultIn(node);
    }

    public void outACtrueConst(ACtrueConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACtrueConst(ACtrueConst node)
    {
        inACtrueConst(node);
        outACtrueConst(node);
    }

    public void inACfalseConst(ACfalseConst node)
    {
        defaultIn(node);
    }

    public void outACfalseConst(ACfalseConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACfalseConst(ACfalseConst node)
    {
        inACfalseConst(node);
        outACfalseConst(node);
    }

    public void inAPlusOp(APlusOp node)
    {
        defaultIn(node);
    }

    public void outAPlusOp(APlusOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusOp(APlusOp node)
    {
        inAPlusOp(node);
        outAPlusOp(node);
    }

    public void inATimesOp(ATimesOp node)
    {
        defaultIn(node);
    }

    public void outATimesOp(ATimesOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATimesOp(ATimesOp node)
    {
        inATimesOp(node);
        outATimesOp(node);
    }

    public void inAMinusOp(AMinusOp node)
    {
        defaultIn(node);
    }

    public void outAMinusOp(AMinusOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusOp(AMinusOp node)
    {
        inAMinusOp(node);
        outAMinusOp(node);
    }

    public void inAAndOp(AAndOp node)
    {
        defaultIn(node);
    }

    public void outAAndOp(AAndOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndOp(AAndOp node)
    {
        inAAndOp(node);
        outAAndOp(node);
    }

    public void inAOrOp(AOrOp node)
    {
        defaultIn(node);
    }

    public void outAOrOp(AOrOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrOp(AOrOp node)
    {
        inAOrOp(node);
        outAOrOp(node);
    }

    public void inALsOp(ALsOp node)
    {
        defaultIn(node);
    }

    public void outALsOp(ALsOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALsOp(ALsOp node)
    {
        inALsOp(node);
        outALsOp(node);
    }

    public void inAGtOp(AGtOp node)
    {
        defaultIn(node);
    }

    public void outAGtOp(AGtOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtOp(AGtOp node)
    {
        inAGtOp(node);
        outAGtOp(node);
    }
}
