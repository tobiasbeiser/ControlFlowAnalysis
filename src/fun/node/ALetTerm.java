/* This file was generated by SableCC (http://www.sablecc.org/). */

package fun.node;

import fun.analysis.*;

@SuppressWarnings("nls")
public final class ALetTerm extends PTerm
{
    private TId _id_;
    private PTerm _val_;
    private PTerm _body_;

    public ALetTerm()
    {
        // Constructor
    }

    public ALetTerm(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") PTerm _val_,
        @SuppressWarnings("hiding") PTerm _body_)
    {
        // Constructor
        setId(_id_);

        setVal(_val_);

        setBody(_body_);

    }

    @Override
    public Object clone()
    {
        return new ALetTerm(
            cloneNode(this._id_),
            cloneNode(this._val_),
            cloneNode(this._body_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALetTerm(this);
    }
    @SuppressWarnings("unchecked")

    public <T,S> T apply(Switch<T,S> sw, S helper)
    {
        return ((GAnalysis<T,S>) sw).caseALetTerm(this,helper);
    }


    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public PTerm getVal()
    {
        return this._val_;
    }

    public void setVal(PTerm node)
    {
        if(this._val_ != null)
        {
            this._val_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._val_ = node;
    }

    public PTerm getBody()
    {
        return this._body_;
    }

    public void setBody(PTerm node)
    {
        if(this._body_ != null)
        {
            this._body_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._body_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._val_)
            + toString(this._body_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._val_ == child)
        {
            this._val_ = null;
            return;
        }

        if(this._body_ == child)
        {
            this._body_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._val_ == oldChild)
        {
            setVal((PTerm) newChild);
            return;
        }

        if(this._body_ == oldChild)
        {
            setBody((PTerm) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
