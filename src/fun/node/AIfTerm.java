/* This file was generated by SableCC (http://www.sablecc.org/). */

package fun.node;

import fun.analysis.*;

@SuppressWarnings("nls")
public final class AIfTerm extends PTerm
{
    private PTerm _test_;
    private PTerm _truebranch_;
    private PTerm _falsebranch_;

    public AIfTerm()
    {
        // Constructor
    }

    public AIfTerm(
        @SuppressWarnings("hiding") PTerm _test_,
        @SuppressWarnings("hiding") PTerm _truebranch_,
        @SuppressWarnings("hiding") PTerm _falsebranch_)
    {
        // Constructor
        setTest(_test_);

        setTruebranch(_truebranch_);

        setFalsebranch(_falsebranch_);

    }

    @Override
    public Object clone()
    {
        return new AIfTerm(
            cloneNode(this._test_),
            cloneNode(this._truebranch_),
            cloneNode(this._falsebranch_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfTerm(this);
    }
    @SuppressWarnings("unchecked")

    public <T,S> T apply(Switch<T,S> sw, S helper)
    {
        return ((GAnalysis<T,S>) sw).caseAIfTerm(this,helper);
    }


    public PTerm getTest()
    {
        return this._test_;
    }

    public void setTest(PTerm node)
    {
        if(this._test_ != null)
        {
            this._test_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._test_ = node;
    }

    public PTerm getTruebranch()
    {
        return this._truebranch_;
    }

    public void setTruebranch(PTerm node)
    {
        if(this._truebranch_ != null)
        {
            this._truebranch_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._truebranch_ = node;
    }

    public PTerm getFalsebranch()
    {
        return this._falsebranch_;
    }

    public void setFalsebranch(PTerm node)
    {
        if(this._falsebranch_ != null)
        {
            this._falsebranch_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._falsebranch_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._test_)
            + toString(this._truebranch_)
            + toString(this._falsebranch_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._test_ == child)
        {
            this._test_ = null;
            return;
        }

        if(this._truebranch_ == child)
        {
            this._truebranch_ = null;
            return;
        }

        if(this._falsebranch_ == child)
        {
            this._falsebranch_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._test_ == oldChild)
        {
            setTest((PTerm) newChild);
            return;
        }

        if(this._truebranch_ == oldChild)
        {
            setTruebranch((PTerm) newChild);
            return;
        }

        if(this._falsebranch_ == oldChild)
        {
            setFalsebranch((PTerm) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
