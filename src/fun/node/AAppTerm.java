/* This file was generated by SableCC (http://www.sablecc.org/). */

package fun.node;

import fun.analysis.*;

@SuppressWarnings("nls")
public final class AAppTerm extends PTerm
{
    private PTerm _fun_;
    private PTerm _arg_;

    public AAppTerm()
    {
        // Constructor
    }

    public AAppTerm(
        @SuppressWarnings("hiding") PTerm _fun_,
        @SuppressWarnings("hiding") PTerm _arg_)
    {
        // Constructor
        setFun(_fun_);

        setArg(_arg_);

    }

    @Override
    public Object clone()
    {
        return new AAppTerm(
            cloneNode(this._fun_),
            cloneNode(this._arg_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAppTerm(this);
    }
    @SuppressWarnings("unchecked")

    public <T,S> T apply(Switch<T,S> sw, S helper)
    {
        return ((GAnalysis<T,S>) sw).caseAAppTerm(this,helper);
    }


    public PTerm getFun()
    {
        return this._fun_;
    }

    public void setFun(PTerm node)
    {
        if(this._fun_ != null)
        {
            this._fun_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fun_ = node;
    }

    public PTerm getArg()
    {
        return this._arg_;
    }

    public void setArg(PTerm node)
    {
        if(this._arg_ != null)
        {
            this._arg_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._arg_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._fun_)
            + toString(this._arg_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._fun_ == child)
        {
            this._fun_ = null;
            return;
        }

        if(this._arg_ == child)
        {
            this._arg_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._fun_ == oldChild)
        {
            setFun((PTerm) newChild);
            return;
        }

        if(this._arg_ == oldChild)
        {
            setArg((PTerm) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
