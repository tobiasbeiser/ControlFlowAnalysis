/* This file was generated by SableCC (http://www.sablecc.org/). */

package fun.parser;

import fun.lexer.*;
import fun.node.*;
import fun.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce ALetTerm */
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce AFnTerm */
		    {
			ArrayList list = new1();
			push(goTo(0), list);
		    }
		    break;
                    case 2: /* reduce AFunTerm */
		    {
			ArrayList list = new2();
			push(goTo(0), list);
		    }
		    break;
                    case 3: /* reduce ALetTlet */
		    {
			ArrayList list = new3();
			push(goTo(1), list);
		    }
		    break;
                    case 4: /* reduce AIfTlet */
		    {
			ArrayList list = new4();
			push(goTo(1), list);
		    }
		    break;
                    case 5: /* reduce AIfTif */
		    {
			ArrayList list = new5();
			push(goTo(2), list);
		    }
		    break;
                    case 6: /* reduce AOrTif */
		    {
			ArrayList list = new6();
			push(goTo(2), list);
		    }
		    break;
                    case 7: /* reduce AAndTor */
		    {
			ArrayList list = new7();
			push(goTo(3), list);
		    }
		    break;
                    case 8: /* reduce AOrTor */
		    {
			ArrayList list = new8();
			push(goTo(3), list);
		    }
		    break;
                    case 9: /* reduce ACompTand */
		    {
			ArrayList list = new9();
			push(goTo(4), list);
		    }
		    break;
                    case 10: /* reduce AAndTand */
		    {
			ArrayList list = new10();
			push(goTo(4), list);
		    }
		    break;
                    case 11: /* reduce ASummandTcomp */
		    {
			ArrayList list = new11();
			push(goTo(5), list);
		    }
		    break;
                    case 12: /* reduce AGtTcomp */
		    {
			ArrayList list = new12();
			push(goTo(5), list);
		    }
		    break;
                    case 13: /* reduce ALsTcomp */
		    {
			ArrayList list = new13();
			push(goTo(5), list);
		    }
		    break;
                    case 14: /* reduce AFactorTsummand */
		    {
			ArrayList list = new14();
			push(goTo(6), list);
		    }
		    break;
                    case 15: /* reduce ASumTsummand */
		    {
			ArrayList list = new15();
			push(goTo(6), list);
		    }
		    break;
                    case 16: /* reduce ADiffTsummand */
		    {
			ArrayList list = new16();
			push(goTo(6), list);
		    }
		    break;
                    case 17: /* reduce AAppTfactor */
		    {
			ArrayList list = new17();
			push(goTo(7), list);
		    }
		    break;
                    case 18: /* reduce AProdTfactor */
		    {
			ArrayList list = new18();
			push(goTo(7), list);
		    }
		    break;
                    case 19: /* reduce AAppTapp */
		    {
			ArrayList list = new19();
			push(goTo(8), list);
		    }
		    break;
                    case 20: /* reduce ASingleTapp */
		    {
			ArrayList list = new20();
			push(goTo(8), list);
		    }
		    break;
                    case 21: /* reduce AConstTsingle */
		    {
			ArrayList list = new21();
			push(goTo(9), list);
		    }
		    break;
                    case 22: /* reduce AIdentTsingle */
		    {
			ArrayList list = new22();
			push(goTo(9), list);
		    }
		    break;
                    case 23: /* reduce AParensTsingle */
		    {
			ArrayList list = new23();
			push(goTo(9), list);
		    }
		    break;
                    case 24: /* reduce ACnumConst */
		    {
			ArrayList list = new24();
			push(goTo(10), list);
		    }
		    break;
                    case 25: /* reduce ACtrueConst */
		    {
			ArrayList list = new25();
			push(goTo(10), list);
		    }
		    break;
                    case 26: /* reduce ACfalseConst */
		    {
			ArrayList list = new26();
			push(goTo(10), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PTerm node1 = (PTerm) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce ALetTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        ptermNode1 = (PTerm)nodeArrayList1.get(0);
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AFnTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TId tidNode2;
        PTerm ptermNode3;
        tidNode2 = (TId)nodeArrayList2.get(0);
        ptermNode3 = (PTerm)nodeArrayList4.get(0);

        ptermNode1 = new AFnTerm(tidNode2, ptermNode3);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AFunTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TId tidNode2;
        TId tidNode3;
        PTerm ptermNode4;
        tidNode2 = (TId)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        ptermNode4 = (PTerm)nodeArrayList5.get(0);

        ptermNode1 = new AFunTerm(tidNode2, tidNode3, ptermNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce ALetTlet */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TId tidNode2;
        PTerm ptermNode3;
        PTerm ptermNode4;
        tidNode2 = (TId)nodeArrayList2.get(0);
        ptermNode3 = (PTerm)nodeArrayList4.get(0);
        ptermNode4 = (PTerm)nodeArrayList6.get(0);

        ptermNode1 = new ALetTerm(tidNode2, ptermNode3, ptermNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AIfTlet */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        ptermNode1 = (PTerm)nodeArrayList1.get(0);
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AIfTif */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        PTerm ptermNode3;
        PTerm ptermNode4;
        ptermNode2 = (PTerm)nodeArrayList2.get(0);
        ptermNode3 = (PTerm)nodeArrayList4.get(0);
        ptermNode4 = (PTerm)nodeArrayList6.get(0);

        ptermNode1 = new AIfTerm(ptermNode2, ptermNode3, ptermNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AOrTif */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        ptermNode1 = (PTerm)nodeArrayList1.get(0);
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AAndTor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        ptermNode1 = (PTerm)nodeArrayList1.get(0);
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AOrTor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        POp popNode2;
        PTerm ptermNode3;
        PTerm ptermNode4;
        {
            // Block

        popNode2 = new AOrOp();
        }
        ptermNode3 = (PTerm)nodeArrayList1.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        ptermNode1 = new ABinopTerm(popNode2, ptermNode3, ptermNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce ACompTand */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        ptermNode1 = (PTerm)nodeArrayList1.get(0);
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAndTand */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        POp popNode2;
        PTerm ptermNode3;
        PTerm ptermNode4;
        {
            // Block

        popNode2 = new AAndOp();
        }
        ptermNode3 = (PTerm)nodeArrayList1.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        ptermNode1 = new ABinopTerm(popNode2, ptermNode3, ptermNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce ASummandTcomp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        ptermNode1 = (PTerm)nodeArrayList1.get(0);
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AGtTcomp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        POp popNode2;
        PTerm ptermNode3;
        PTerm ptermNode4;
        {
            // Block

        popNode2 = new AGtOp();
        }
        ptermNode3 = (PTerm)nodeArrayList1.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        ptermNode1 = new ABinopTerm(popNode2, ptermNode3, ptermNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce ALsTcomp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        POp popNode2;
        PTerm ptermNode3;
        PTerm ptermNode4;
        {
            // Block

        popNode2 = new ALsOp();
        }
        ptermNode3 = (PTerm)nodeArrayList1.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        ptermNode1 = new ABinopTerm(popNode2, ptermNode3, ptermNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AFactorTsummand */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        ptermNode1 = (PTerm)nodeArrayList1.get(0);
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce ASumTsummand */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        POp popNode2;
        PTerm ptermNode3;
        PTerm ptermNode4;
        {
            // Block

        popNode2 = new APlusOp();
        }
        ptermNode3 = (PTerm)nodeArrayList1.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        ptermNode1 = new ABinopTerm(popNode2, ptermNode3, ptermNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce ADiffTsummand */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        POp popNode2;
        PTerm ptermNode3;
        PTerm ptermNode4;
        {
            // Block

        popNode2 = new AMinusOp();
        }
        ptermNode3 = (PTerm)nodeArrayList1.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        ptermNode1 = new ABinopTerm(popNode2, ptermNode3, ptermNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AAppTfactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        ptermNode1 = (PTerm)nodeArrayList1.get(0);
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AProdTfactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        POp popNode2;
        PTerm ptermNode3;
        PTerm ptermNode4;
        {
            // Block

        popNode2 = new ATimesOp();
        }
        ptermNode3 = (PTerm)nodeArrayList1.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        ptermNode1 = new ABinopTerm(popNode2, ptermNode3, ptermNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AAppTapp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        PTerm ptermNode3;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        ptermNode3 = (PTerm)nodeArrayList2.get(0);

        ptermNode1 = new AAppTerm(ptermNode2, ptermNode3);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce ASingleTapp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        ptermNode1 = (PTerm)nodeArrayList1.get(0);
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AConstTsingle */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PConst pconstNode2;
        pconstNode2 = (PConst)nodeArrayList1.get(0);

        ptermNode1 = new AConstTerm(pconstNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AIdentTsingle */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        ptermNode1 = new AIdentTerm(tidNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AParensTsingle */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        ptermNode1 = (PTerm)nodeArrayList2.get(0);
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce ACnumConst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConst pconstNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        pconstNode1 = new ACnumConst(tintegerNode2);
        }
	nodeList.add(pconstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce ACtrueConst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConst pconstNode1;
        {
            // Block

        pconstNode1 = new ACtrueConst();
        }
	nodeList.add(pconstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce ACfalseConst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConst pconstNode1;
        {
            // Block

        pconstNode1 = new ACfalseConst();
        }
	nodeList.add(pconstNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {4, SHIFT, 4}, {5, SHIFT, 5}, {6, SHIFT, 6}, {9, SHIFT, 7}, {20, SHIFT, 8}, {21, SHIFT, 9}, },
			{{-1, ERROR, 1}, {0, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {4, SHIFT, 4}, {5, SHIFT, 5}, {6, SHIFT, 6}, {9, SHIFT, 7}, {20, SHIFT, 8}, {21, SHIFT, 9}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 4}, {21, SHIFT, 22}, },
			{{-1, ERROR, 5}, {21, SHIFT, 23}, },
			{{-1, ERROR, 6}, {0, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {4, SHIFT, 4}, {5, SHIFT, 5}, {6, SHIFT, 6}, {9, SHIFT, 7}, {20, SHIFT, 8}, {21, SHIFT, 9}, },
			{{-1, ERROR, 7}, {21, SHIFT, 25}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 10}, {22, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 9}, {16, SHIFT, 26}, {17, SHIFT, 27}, },
			{{-1, REDUCE, 11}, {18, SHIFT, 28}, {19, SHIFT, 29}, },
			{{-1, REDUCE, 14}, {13, SHIFT, 30}, {14, SHIFT, 31}, },
			{{-1, REDUCE, 17}, {15, SHIFT, 32}, },
			{{-1, REDUCE, 20}, {0, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {20, SHIFT, 8}, {21, SHIFT, 9}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 21}, {1, SHIFT, 34}, },
			{{-1, ERROR, 22}, {11, SHIFT, 35}, },
			{{-1, ERROR, 23}, {21, SHIFT, 36}, },
			{{-1, ERROR, 24}, {7, SHIFT, 37}, },
			{{-1, ERROR, 25}, {12, SHIFT, 38}, },
			{{-1, ERROR, 26}, {0, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {20, SHIFT, 8}, {21, SHIFT, 9}, },
			{{-1, ERROR, 27}, {0, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {20, SHIFT, 8}, {21, SHIFT, 9}, },
			{{-1, ERROR, 28}, {0, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {20, SHIFT, 8}, {21, SHIFT, 9}, },
			{{-1, ERROR, 29}, {0, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {20, SHIFT, 8}, {21, SHIFT, 9}, },
			{{-1, ERROR, 30}, {0, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {20, SHIFT, 8}, {21, SHIFT, 9}, },
			{{-1, ERROR, 31}, {0, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {20, SHIFT, 8}, {21, SHIFT, 9}, },
			{{-1, ERROR, 32}, {0, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {20, SHIFT, 8}, {21, SHIFT, 9}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 35}, {0, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {4, SHIFT, 4}, {5, SHIFT, 5}, {6, SHIFT, 6}, {9, SHIFT, 7}, {20, SHIFT, 8}, {21, SHIFT, 9}, },
			{{-1, ERROR, 36}, {11, SHIFT, 48}, },
			{{-1, ERROR, 37}, {0, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {4, SHIFT, 4}, {5, SHIFT, 5}, {6, SHIFT, 6}, {9, SHIFT, 7}, {20, SHIFT, 8}, {21, SHIFT, 9}, },
			{{-1, ERROR, 38}, {0, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {4, SHIFT, 4}, {5, SHIFT, 5}, {6, SHIFT, 6}, {9, SHIFT, 7}, {20, SHIFT, 8}, {21, SHIFT, 9}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 9}, {16, SHIFT, 26}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 48}, {0, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {4, SHIFT, 4}, {5, SHIFT, 5}, {6, SHIFT, 6}, {9, SHIFT, 7}, {20, SHIFT, 8}, {21, SHIFT, 9}, },
			{{-1, ERROR, 49}, {8, SHIFT, 52}, },
			{{-1, ERROR, 50}, {10, SHIFT, 53}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 52}, {0, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {6, SHIFT, 6}, {20, SHIFT, 8}, {21, SHIFT, 9}, },
			{{-1, ERROR, 53}, {0, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {6, SHIFT, 6}, {9, SHIFT, 7}, {20, SHIFT, 8}, {21, SHIFT, 9}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 3}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 10}, {1, 21}, {6, 24}, {35, 47}, {37, 49}, {38, 50}, {48, 51}, },
			{{-1, 11}, {53, 55}, },
			{{-1, 12}, {52, 54}, },
			{{-1, 13}, },
			{{-1, 14}, {26, 39}, {27, 41}, },
			{{-1, 15}, {26, 40}, {27, 40}, {28, 42}, {29, 43}, },
			{{-1, 16}, {30, 44}, {31, 45}, },
			{{-1, 17}, {32, 46}, },
			{{-1, 18}, {19, 33}, },
			{{-1, 19}, },
			{{-1, 20}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: '(', 'true', 'false', 'fn', 'fun', 'if', 'let', integer, id",
			"expecting: '(', ')', 'true', 'false', 'then', 'else', 'in', '+', '-', '*', '&&', '||', '<', '>', integer, id, EOF",
			"expecting: id",
			"expecting: EOF",
			"expecting: ')', 'then', 'else', 'in', EOF",
			"expecting: ')', 'then', 'else', 'in', '&&', '||', EOF",
			"expecting: ')', 'then', 'else', 'in', '&&', '||', '<', '>', EOF",
			"expecting: ')', 'then', 'else', 'in', '+', '-', '&&', '||', '<', '>', EOF",
			"expecting: ')', 'then', 'else', 'in', '+', '-', '*', '&&', '||', '<', '>', EOF",
			"expecting: ')'",
			"expecting: '=>'",
			"expecting: 'then'",
			"expecting: '='",
			"expecting: '(', 'true', 'false', integer, id",
			"expecting: ')', 'then', 'else', 'in', '&&', EOF",
			"expecting: 'else'",
			"expecting: 'in'",
			"expecting: '(', 'true', 'false', 'if', integer, id",
			"expecting: '(', 'true', 'false', 'if', 'let', integer, id",
        };*/
    private static int[] errors;
/*      {
			0, 0, 1, 1, 2, 2, 0, 2, 1, 1, 3, 4, 4, 4, 4, 5, 6, 7, 8, 1, 1, 9, 10, 2, 11, 12, 13, 13, 13, 13, 13, 13, 13, 8, 1, 0, 10, 0, 0, 4, 14, 4, 5, 5, 6, 6, 7, 4, 0, 15, 16, 4, 17, 18, 4, 4, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
